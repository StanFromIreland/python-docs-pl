# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# m_aciek <maciej.olko@gmail.com>, 2020
# Bartosz Chmiel <chmielbartosz@gmail.com>, 2020
# Igor Zubrycki <igorzubrycki@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-22 14:54+0000\n"
"PO-Revision-Date: 2020-05-30 12:16+0000\n"
"Last-Translator: Igor Zubrycki <igorzubrycki@gmail.com>, 2020\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && (n"
"%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && n"
"%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "More Control Flow Tools"
msgstr "Więcej narzędzi kontroli przepływu"

msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr ""
"Oprócz wprowadzonej przed chwilą instrukcji :keyword:`while`, Python używa "
"zwykłych instrukcji kontroli przepływu znanych z innych języków, z drobnymi "
"zmianami."

msgid ":keyword:`!if` Statements"
msgstr "Instrukcje :keyword:`!if`"

msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"Prawdopodobnie najbardziej znanym typem instrukcji jest instrukcja :keyword:"
"`if`. Na przykład::"

msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"Części :keyword:`elif` może być zero lub więcej i część :keyword:`else` jest "
"opcjonalna. Keyword „:keyword:`!elif`” jest skrótem od „else if” i jest "
"przydatny by uniknąć nadmiarowych wcięć. Sekwencja :keyword:`!if` … :keyword:"
"`!elif` … :keyword:`!elif` … jest zamiennikiem instrukcji ``switch`` lub "
"``case`` z innych języków."

msgid ":keyword:`!for` Statements"
msgstr "Instrukcje :keyword:`!for`"

msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"Instrukcja :keyword:`for` różni się troszeczkę w Pythonie od tego, co "
"używasz w C lub Pascalu. Nie prowadzi się iteracji od liczby do liczby (jak "
"w Pascalu) lub daje się użytkownikowi możliwość definiowania kroku iteracji "
"i warunki zakończenia iteracji (jak w C). Instrukcja :keyword:`!for` w "
"Pythonie powoduje iterację po elementach jakiejkolwiek sekwencji (listy lub "
"łańcucha znaków), w takim porządku, w jakim są one umieszczone w danej "
"sekwencji. Na przykład (gra słów niezamierzona):"

msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to "
"loop over a copy of the collection or to create a new collection::"
msgstr ""
"Kod, który zmienia kolekcję podczas iterowania po niej, może być trudny. "
"Zamiast tego, zazwyczaj prostsze jest przejść pętlą po kopii kolekcji lub "
"stworzyć nową kolekcję::"

msgid "The :func:`range` Function"
msgstr "Funkcja :func:`range`"

msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Jeśli potrzebujesz iterować po sekwencji liczb, przydatna jest wbudowana "
"funkcja :func:`range`. Generuje ciągi arytmetyczne::"

msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"Podany punkt końcowy nigdy nie jest częścią generowanej sekwencji; "
"``range(10)`` generuje 10 wartości, poprawne indeksy dla elementów sekwencji "
"o długości 10. Możliwe jest zacząć zakres od innej liczby lub podać inne "
"zwiększenie (nawet ujemne; czasem jest to nazywane „krokiem”)::"

msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"By przeiterować po indeksach sekwencji możesz połączyć :func:`range` i :func:"
"`len` w następujący sposób::"

msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"Jednak w większości takich przypadków wygodnie jest użyć funkcji :func:"
"`enumerate`, patrz :ref:`tut-loopidioms`."

msgid "A strange thing happens if you just print a range::"
msgstr "Dzieje się dziwna rzecz jeśli po prostu wydrukujesz zakres::"

msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"Pod wieloma względami obiekt zwracany przez :func:`range` zachowuje się, "
"jakby był listą, ale w rzeczywistości nią nie jest. Jest obiektem, który "
"zwraca kolejne elementy żądanej sekwencji w trakcie twojego iterowania po "
"nim, lecz naprawdę nie tworzy listy, tak więc oszczędza miejsce w pamięci "
"komputera."

msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the :"
"keyword:`for` statement is such a construct, while an example of a function "
"that takes an iterable is :func:`sum`::"
msgstr ""
"Mówimy, że taki obiekt to :term:`iterable`, to znaczy odpowiedni jako cel "
"dla funkcji i konstrukcji, które spodziewają się czegoś, z czego można "
"pobierać kolejne elementy aż do wyczerpania zapasu. Widzieliśmy, że "
"instrukcja :keyword:`for` jest takim konstruktem, podczas gdy przykładem "
"funkcji, która spodziewa się obiektu iterable jest :func:`sum`::"

msgid ""
"Later we will see more functions that return iterables and take iterables as "
"arguments.  Lastly, maybe you are curious about how to get a list from a "
"range. Here is the solution::"
msgstr ""
"Później obejrzymy więcej funkcji, które zwracają iterable i biorą iterable "
"jako argumenty. Może jesteś ciekawy(-a) jak uzyskać listę z zakresu. Tutaj "
"jest rozwiązanie::"

msgid ""
"In chapter :ref:`tut-structures`, we will discuss in more detail about :func:"
"`list`."
msgstr ""
"W rozdziale :ref:`tut-structures` omówimy bardziej szczegółowo :func:`list`."

msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""
":keyword:`!break` i :keyword:`!continue` oraz klauzula :keyword:`!else` w "
"pętlach"

msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""
"Instrukcja :keyword:`break`, tak jak w C, wychodzi z najbardziej wewnętrznej "
"pętli :keyword:`for` lub :keyword:`while` zawierającej tę instrukcję."

msgid ""
"Loop statements may have an :keyword:`!else` clause; it is executed when the "
"loop terminates through exhaustion of the iterable (with :keyword:`for`) or "
"when the condition becomes false (with :keyword:`while`), but not when the "
"loop is terminated by a :keyword:`break` statement.  This is exemplified by "
"the following loop, which searches for prime numbers::"
msgstr ""
"Instrukcje pętli mogą mieć klauzulę :keyword:`!else`. Jest ona wykonywana, "
"gdy pętla kończy się przez wyczerpanie się iterable'a (w pętli :keyword:"
"`for`) lub kiedy warunek staje się fałszywy (w pętli :keyword:`while`), lecz "
"nie gdy pętli jest przerwana przez instrukcję :keyword:`break`. Ilustruje to "
"poniższa pętla, która wyszukuje liczby pierwsze::"

msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"(Tak, to poprawny kod. Przyjrzyj się: klauzula ``else`` należy do pętli :"
"keyword:`for`, **nie** do instrukcji :keyword:`if`.)"

msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of :"
"keyword:`if` statements: a :keyword:`try` statement's ``else`` clause runs "
"when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`!try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr ""
"Gdy używasz jej z pętlą, klauzula ``else`` ma więcej wspólnego z klauzulą "
"``else`` instrukcji :keyword:`try` niż z tą z instrukcji :keyword:`if`: "
"klauzula ``else`` instrukcji :keyword:`try` jest uruchamiana, gdy nie "
"zostanie zgłoszony wyjątek, a klauzula ``else`` pętli jest uruchamiana, gdy "
"nie wystąpi ``break``. Więcej informacji na temat instrukcji :keyword:`!try` "
"i wyjątków znajdziesz w :ref:`tut-handling`."

msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""
"Instrukcja :keyword:`continue`, również pożyczona z C, kontynuuje następną "
"iterację pętli::"

msgid ":keyword:`!pass` Statements"
msgstr "Instrukcje :keyword:`!pass`"

msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"Instrukcja :keyword:`pass` nie robi nic. Można jej użyć, gdy składnia wymaga "
"instrukcji a program nie wymaga działania. Na przykład::"

msgid "This is commonly used for creating minimal classes::"
msgstr "Często jej się używa do tworzenia minimalnych klas::"

msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
"Innym miejscem, w którym można użyć :keyword:`pass` to placeholder dla "
"funkcji lub ciała warunku, kiedy pracujesz nad nowym kodem. Pozwoli ci to "
"myśleć na bardziej abstrakcyjnym poziomie. :keyword:`!pass` jest „po cichu” "
"ignorowane::"

msgid "Defining Functions"
msgstr "Definiowanie funkcji"

msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Możemy stworzyć funkcję, która wypisuje ciąg Fibonacciego do wskazanej "
"granicy::"

msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"Słowo kluczowe :keyword:`def` oznacza *definicję* funkcji. Po nim musi "
"następować nazwa funkcji oraz lista formalnych parametrów otoczona "
"nawiasami. Instrukcje, które stanowią ciało funkcji zaczynają się w "
"następnej linii i muszą być wcięte."

msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"Opcjonalnie, pierwszy wiersz ciała funkcji może być gołym napisem "
"(literałem): jest to tzw. napis dokumentujący lub inaczej :dfn:"
"`docstring`. (Więcej o docstringach znajdziesz w sekcji :ref:`tut-"
"docstrings`.) Istnieją pewne narzędzia, które używają docstringów do "
"automatycznego tworzenia drukowanej lub dostępnej online dokumentacji albo "
"pozwalają użytkownikowi na interaktywne przeglądanie kodu. Dobrym zwyczajem "
"jest pisane napisów dokumentacyjnych w czasie pisania programu: spróbuj się "
"do tego przyzwyczaić."

msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"*Wykonanie* funkcji powoduje stworzenie nowej tablicy symboli lokalnych "
"używanych w tej funkcji. Mówiąc precyzyjniej: wszystkie przypisania do "
"zmiennych lokalnych funkcji powodują umieszczenie tych wartości w lokalnej "
"tablicy symboli. Odniesienia do zmiennych najpierw szukają swych wartości w "
"lokalnej tablicy symboli, potem w lokalnych tablicach symboli funkcji "
"otaczających, potem w globalnej, a dopiero na końcu w tablicy nazw "
"wbudowanych w interpreter. Tak więc, zmiennym globalnym ani zmiennym w "
"otaczających funkcjach nie można wprost przypisać wartości w ciele funkcji "
"(chyba, że zostaną wymienione w niej za pomocą instrukcji :keyword:`global` "
"lub dla zmiennych w otaczających funkcjach, wymienionych w instrukcji :"
"keyword:`nonlocal`), aczkolwiek mogą w niej być używane (czytane)."

msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, a new local symbol table is created for that call."
msgstr ""
"Parametry (argumenty) wywołania funkcji wprowadzane są do lokalnej tablicy "
"symboli w momencie wywołania funkcji. Tak więc, argumenty przekazywane są "
"jej przez wartość (gdzie *wartość* jest zawsze *odniesieniem* do obiektu, a "
"nie samym obiektem). [#]_ Nowa tablica symboli tworzona jest również w "
"przypadku, gdy funkcja wywołuje inną funkcję."

msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""
"Definicja funkcji powiązuje nazwę funkcji z obiektem funkcji w aktualnej "
"tablicy symboli. Interpreter rozpoznaje obiekt wskazany tą nazwą jako "
"funkcję zdefiniowaną przez użytkownika. Inne nazwy też mogą wskazywać na ten "
"sam obiekt funkcji i mogą być używane, aby dostać się do funkcji::"

msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"Przychodząc z innych języków, mógłbyś oponować, że ``fib`` nie jest funkcją, "
"ale procedurą, jako że nie zwraca wartości. Tak naprawdę nawet funkcje bez "
"instrukcji :keyword:`return` zwracają wartość, chociaż dość nudną. Tę "
"wartość nazywamy ``None`` (to wbudowana nazwa). Wypisywanie wartości "
"``None`` jest normalnie pomijane przez interpreter, jeśli miałaby to jedyna "
"wypisywana wartość. Możesz ją zobaczyć, jeśli bardzo chcesz, używając :func:"
"`print`::"

msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"Prosto można napisać funkcję, która zwraca listę numerów ciągu Fibonnaciego "
"zamiast go wyświetlać::"

msgid "This example, as usual, demonstrates some new Python features:"
msgstr "Ten przykład, jak zazwyczaj, prezentuje nowe cechy Pythona:"

msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"Instrukcja :keyword:`return` zwraca wartość funkcji. :keyword:`!return` bez "
"wyrażenia podanego jako argument zwraca ``None``. Dojście do końca funkcji "
"również zwraca ``None``."

msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`append` shown in the example is defined "
"for list objects; it adds a new element at the end of the list.  In this "
"example it is equivalent to ``result = result + [a]``, but more efficient."
msgstr ""
"Instrukcja ``result.append(a)`` wywołuje *metodę* listy obiektów ``result``. "
"Metoda to funkcja, która „należy” do obiektu i jest nazwana ``obj."
"methodname``, gdzie ``obj`` jest jakimś obiektem (może też być wyrażeniem) a "
"``methodname`` jest nazwą metody, które jest zdefiniowana przez typ obiektu. "
"Różne typy definiują różne metody. Metody różnych typów mogą mieć te same "
"nazwy bez powodowania dwuznaczności. (Da się definiować własne typy obiektów "
"i metody, używając *klas*, patrz :ref:`tut-classes`.) Metoda :meth:`append` "
"pokazana w przykładzie jest zdefiniowana dla listy obiektów; dodaje nowy "
"element na końcu listy. W tym przykładzie jest równoważna ``result = result "
"+ [a]``, ale bardziej wydajna."

msgid "More on Defining Functions"
msgstr "Więcej o definiowaniu funkcji"

msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"Można też definiować funkcje ze zmienną liczbą argumentów. Są trzy sposoby, "
"które można łączyć."

msgid "Default Argument Values"
msgstr "Domyślne wartości argumentów"

msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"Najbardziej przydatnym sposobem jest podanie domyślnej wartości dla jednego "
"lub więcej argumentów. Tworzy to funkcję, która może zostać wywołana z "
"mniejszą liczbą argumentów, niż jest podane w jej definicji. Na przykład::"

msgid "This function can be called in several ways:"
msgstr "Tę funkcję można wywołać na kilka sposobów:"

msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""
"podając tylko wymagany argument: ``ask_ok('Do you really want to quit?')``"

msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"podając jeden z opcjonalnych argumentów: ``ask_ok('OK to overwrite the "
"file?', 2)``"

msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"lub podając wszystkie argumenty: ``ask_ok('OK to overwrite file?', 2, 'Come "
"on, only yes or no!')``"

msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"Ten przykład wprowadza słowo kluczowe :keyword:`in`. Sprawdza ono, czy "
"sekwencja zawiera szczególną wartość."

msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Wartości domyślne są ewaluowane w momencie definiowania funkcji w scopie "
"*defining*, więc ::"

msgid "will print ``5``."
msgstr "wyświetli ``5``."

msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Ważna uwaga**: Wartość domyślna jest wyliczana tylko raz. Ma to znaczenie, "
"gdy domyślna wartość jest obiektem mutowalnym takim jak lista, słownik lub "
"instancje większości klas. Na przykład następująca funkcja akumuluje "
"argumenty przekazane do niej w kolejnych wywołaniach::"

msgid "This will print ::"
msgstr "To wyświetli ::"

msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"Jeśli nie chcesz, żeby domyślna wartość była współdzielona pomiędzy "
"kolejnymi wywołaniami, możesz napisać funkcję w ten sposób::"

msgid "Keyword Arguments"
msgstr "Argumenty nazwane"

msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"Funkcje mogą być również wywoływane przy użyciu :term:`argumentów nazwanych "
"<keyword argument>` w formie ``kwarg=value``. Na przykład poniższa funkcja::"

msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"akceptuje jeden wymagany argument (``voltage``) i trzy opcjonalne argumenty "
"(``state``, ``action`` i ``type``). Funkcja może być wywołana w dowolny z "
"poniższych sposobów::"

msgid "but all the following calls would be invalid::"
msgstr "ale wszystkie poniższe wywołania byłyby niepoprawne::"

msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"W wywołaniu funkcji argumenty nazwane muszą znajdować się za argumentami "
"pozycyjnymi. Wszystkie przekazane argumenty nazwane muszą pasować do jednego "
"argumentu akceptowanego przez funkcję (na przykład ``actor`` nie jest "
"poprawnym argumentem dla funkcji ``parrot``) a ich kolejność nie ma "
"znaczenia. Dotyczy to również nie-opcjonalnych argumentów (na przykład "
"``parrot(voltage=1000)`` też jest poprawne). Żaden argument nie może "
"otrzymać wartości więcej niż raz. Tutaj jest przykład, który się nie "
"powiedzie z powodu tego ograniczenia::"

msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""

msgid "It could be called like this::"
msgstr "Można ją wywołać w ten sposób::"

msgid "and of course it would print:"
msgstr "i oczywiście wyświetli się nam:"

msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""
"Zwróć uwagę, że kolejność w jakim argumenty są wyświetlane dokładnie "
"odpowiada kolejności w jakim zostały one podane w wywołaniu funkcji."

msgid "Special parameters"
msgstr "Parametry specjalne"

msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to "
"restrict the way arguments can be passed so that a developer need only look "
"at the function definition to determine if items are passed by position, by "
"position or keyword, or by keyword."
msgstr ""

msgid "A function definition may look like:"
msgstr "Definicja funkcji może wyglądać w ten sposób:"

msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind "
"of parameter by how the arguments may be passed to the function: positional-"
"only, positional-or-keyword, and keyword-only. Keyword parameters are also "
"referred to as named parameters."
msgstr ""

msgid "Positional-or-Keyword Arguments"
msgstr ""

msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may "
"be passed to a function by position or by keyword."
msgstr ""

msgid "Positional-Only Parameters"
msgstr ""

msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order "
"matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""

msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr ""

msgid "Keyword-Only Arguments"
msgstr ""

msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before "
"the first *keyword-only* parameter."
msgstr ""

msgid "Function Examples"
msgstr "Przykłady Funkcji"

msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr ""

msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed "
"by position or keyword::"
msgstr ""

msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr ""

msgid ""
"The third function ``kwd_only_args`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr ""

msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr ""

msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""

msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr ""

msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""

msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr ""

msgid "Recap"
msgstr ""

msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr ""

msgid "As guidance:"
msgstr ""

msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function "
"is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""

msgid ""
"Use keyword-only when names have meaning and the function definition is more "
"understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr ""

msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr ""

msgid "Arbitrary Argument Lists"
msgstr ""

msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""

msgid ""
"Normally, these ``variadic`` arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""

msgid "Unpacking Argument Lists"
msgstr ""

msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""

msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""

msgid "Lambda Expressions"
msgstr ""

msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""

msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""

msgid "Documentation Strings"
msgstr ""

msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""

msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""

msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""

msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace \"equivalent"
"\" to this indentation is then stripped from the start of all lines of the "
"string.  Lines that are indented less should not occur, but if they occur "
"all their leading whitespace should be stripped.  Equivalence of whitespace "
"should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""

msgid "Here is an example of a multi-line docstring::"
msgstr ""

msgid "Function Annotations"
msgstr ""

msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""

msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:"
"`__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a positional argument, a keyword argument, and the return value annotated::"
msgstr ""

msgid "Intermezzo: Coding Style"
msgstr ""

msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""

msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""

msgid "Use 4-space indentation, and no tabs."
msgstr ""

msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""

msgid "Wrap lines so that they don't exceed 79 characters."
msgstr ""

msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""

msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""

msgid "When possible, put comments on a line of their own."
msgstr ""

msgid "Use docstrings."
msgstr ""

msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""

msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""

msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""

msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""

msgid "Footnotes"
msgstr "Przypisy"

msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
