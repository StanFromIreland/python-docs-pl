# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# m_aciek <maciej.olko@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 12:40+0000\n"
"PO-Revision-Date: 2020-05-30 11:52+0000\n"
"Last-Translator: m_aciek <maciej.olko@gmail.com>, 2020\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && (n"
"%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && n"
"%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Creating a Source Distribution"
msgstr ""

msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html "
"independently covers all of the relevant information currently included here."
msgstr ""

msgid ""
"As shown in section :ref:`distutils-simple-example`, you use the :command:"
"`sdist` command to create a source distribution.  In the simplest case, ::"
msgstr ""

msgid ""
"(assuming you haven't specified any :command:`sdist` options in the setup "
"script or config file), :command:`sdist` creates the archive of the default "
"format for the current platform.  The default format is a gzip'ed tar file (:"
"file:`.tar.gz`) on Unix, and ZIP file on Windows."
msgstr ""

msgid ""
"You can specify as many formats as you like using the :option:`!--formats` "
"option, for example::"
msgstr ""

msgid "to create a gzipped tarball and a zip file.  The available formats are:"
msgstr ""

msgid "Format"
msgstr "Format"

msgid "Description"
msgstr "Opis"

msgid "Notes"
msgstr "Notatki"

msgid "``zip``"
msgstr "``zip``"

msgid "zip file (:file:`.zip`)"
msgstr "plik zip (:file:`.zip`)"

msgid "(1),(3)"
msgstr ""

msgid "``gztar``"
msgstr "``gztar``"

msgid "gzip'ed tar file (:file:`.tar.gz`)"
msgstr ""

msgid "\\(2)"
msgstr ""

msgid "``bztar``"
msgstr "``bztar``"

msgid "bzip2'ed tar file (:file:`.tar.bz2`)"
msgstr ""

msgid "``xztar``"
msgstr ""

msgid "xz'ed tar file (:file:`.tar.xz`)"
msgstr ""

msgid "``ztar``"
msgstr "``ztar``"

msgid "compressed tar file (:file:`.tar.Z`)"
msgstr "skompresowany plik tar (file`.tar.Z`)"

msgid "\\(4)"
msgstr "\\(4)"

msgid "``tar``"
msgstr "``tar``"

msgid "tar file (:file:`.tar`)"
msgstr "plik tar (:file:`.tar`)"

msgid "Added support for the ``xztar`` format."
msgstr ""

msgid "Notes:"
msgstr "Uwagi:"

msgid "default on Windows"
msgstr "domyślne dla Windows"

msgid "default on Unix"
msgstr "domyślne dla Unix"

msgid ""
"requires either external :program:`zip` utility or :mod:`zipfile` module "
"(part of the standard Python library since Python 1.6)"
msgstr ""
"wymaga zewnętrznego programu użytkowego :program:`zip` lub modułu :mod:"
"`zipfile` (części standardowej biblioteki języka pytonowskiego od wersji 1.6 "
"języka pytonowskiego)"

msgid ""
"requires the :program:`compress` program. Notice that this format is now "
"pending for deprecation and will be removed in the future versions of Python."
msgstr ""

msgid ""
"When using any ``tar`` format (``gztar``, ``bztar``, ``xztar``, ``ztar`` or "
"``tar``), under Unix you can specify the ``owner`` and ``group`` names that "
"will be set for each member of the archive."
msgstr ""

msgid "For example, if you want all files of the archive to be owned by root::"
msgstr ""

msgid "Specifying the files to distribute"
msgstr ""

msgid ""
"If you don't supply an explicit list of files (or instructions on how to "
"generate one), the :command:`sdist` command puts a minimal default set into "
"the source distribution:"
msgstr ""

msgid ""
"all Python source files implied by the ``py_modules`` and ``packages`` "
"options"
msgstr ""

msgid ""
"all C source files mentioned in the ``ext_modules`` or ``libraries`` options"
msgstr ""

msgid ""
"scripts identified by the ``scripts`` option See :ref:`distutils-installing-"
"scripts`."
msgstr ""

msgid ""
"anything that looks like a test script: :file:`test/test\\*.py` (currently, "
"the Distutils don't do anything with test scripts except include them in "
"source distributions, but in the future there will be a standard for testing "
"Python module distributions)"
msgstr ""

msgid ""
"Any of the standard README files (:file:`README`, :file:`README.txt`, or :"
"file:`README.rst`), :file:`setup.py` (or whatever you called your setup "
"script), and :file:`setup.cfg`."
msgstr ""

msgid ""
"all files that matches the ``package_data`` metadata. See :ref:`distutils-"
"installing-package-data`."
msgstr ""

msgid ""
"all files that matches the ``data_files`` metadata. See :ref:`distutils-"
"additional-files`."
msgstr ""

msgid ""
"Sometimes this is enough, but usually you will want to specify additional "
"files to distribute.  The typical way to do this is to write a *manifest "
"template*, called :file:`MANIFEST.in` by default.  The manifest template is "
"just a list of instructions for how to generate your manifest file, :file:"
"`MANIFEST`, which is the exact list of files to include in your source "
"distribution.  The :command:`sdist` command processes this template and "
"generates a manifest based on its instructions and what it finds in the "
"filesystem."
msgstr ""

msgid ""
"If you prefer to roll your own manifest file, the format is simple: one "
"filename per line, regular files (or symlinks to them) only.  If you do "
"supply your own :file:`MANIFEST`, you must specify everything: the default "
"set of files described above does not apply in this case."
msgstr ""

msgid ""
"An existing generated :file:`MANIFEST` will be regenerated without :command:"
"`sdist` comparing its modification time to the one of :file:`MANIFEST.in` "
"or :file:`setup.py`."
msgstr ""

msgid ""
":file:`MANIFEST` files start with a comment indicating they are generated. "
"Files without this comment are not overwritten or removed."
msgstr ""

msgid ""
":command:`sdist` will read a :file:`MANIFEST` file if no :file:`MANIFEST.in` "
"exists, like it used to do."
msgstr ""

msgid ""
":file:`README.rst` is now included in the list of distutils standard READMEs."
msgstr ""

msgid ""
"The manifest template has one command per line, where each command specifies "
"a set of files to include or exclude from the source distribution.  For an "
"example, again we turn to the Distutils' own manifest template:"
msgstr ""

msgid ""
"The meanings should be fairly clear: include all files in the distribution "
"root matching :file:`\\*.txt`, all files anywhere under the :file:`examples` "
"directory matching :file:`\\*.txt` or :file:`\\*.py`, and exclude all "
"directories matching :file:`examples/sample?/build`.  All of this is done "
"*after* the standard include set, so you can exclude files from the standard "
"set with explicit instructions in the manifest template.  (Or, you can use "
"the :option:`!--no-defaults` option to disable the standard set entirely.)  "
"There are several other commands available in the manifest template mini-"
"language; see section :ref:`sdist-cmd`."
msgstr ""

msgid ""
"The order of commands in the manifest template matters: initially, we have "
"the list of default files as described above, and each command in the "
"template adds to or removes from that list of files.  Once we have fully "
"processed the manifest template, we remove files that should not be included "
"in the source distribution:"
msgstr ""

msgid "all files in the Distutils \"build\" tree (default :file:`build/`)"
msgstr ""

msgid ""
"all files in directories named :file:`RCS`, :file:`CVS`, :file:`.svn`, :file:"
"`.hg`, :file:`.git`, :file:`.bzr` or :file:`_darcs`"
msgstr ""

msgid ""
"Now we have our complete list of files, which is written to the manifest for "
"future reference, and then used to build the source distribution archive(s)."
msgstr ""

msgid ""
"You can disable the default set of included files with the :option:`!--no-"
"defaults` option, and you can disable the standard exclude set with :option:"
"`!--no-prune`."
msgstr ""

msgid ""
"Following the Distutils' own manifest template, let's trace how the :command:"
"`sdist` command builds the list of files to include in the Distutils source "
"distribution:"
msgstr ""

msgid ""
"include all Python source files in the :file:`distutils` and :file:"
"`distutils/command` subdirectories (because packages corresponding to those "
"two directories were mentioned in the ``packages`` option in the setup "
"script---see section :ref:`setup-script`)"
msgstr ""

msgid ""
"include :file:`README.txt`, :file:`setup.py`, and :file:`setup.cfg` "
"(standard files)"
msgstr ""

msgid "include :file:`test/test\\*.py` (standard files)"
msgstr ""

msgid ""
"include :file:`\\*.txt` in the distribution root (this will find :file:"
"`README.txt` a second time, but such redundancies are weeded out later)"
msgstr ""

msgid ""
"include anything matching :file:`\\*.txt` or :file:`\\*.py` in the sub-tree "
"under :file:`examples`,"
msgstr ""

msgid ""
"exclude all files in the sub-trees starting at directories matching :file:"
"`examples/sample?/build`\\ ---this may exclude files included by the "
"previous two steps, so it's important that the ``prune`` command in the "
"manifest template comes after the ``recursive-include`` command"
msgstr ""

msgid ""
"exclude the entire :file:`build` tree, and any :file:`RCS`, :file:`CVS`, :"
"file:`.svn`, :file:`.hg`, :file:`.git`, :file:`.bzr` and :file:`_darcs` "
"directories"
msgstr ""

msgid ""
"Just like in the setup script, file and directory names in the manifest "
"template should always be slash-separated; the Distutils will take care of "
"converting them to the standard representation on your platform. That way, "
"the manifest template is portable across operating systems."
msgstr ""

msgid "Manifest-related options"
msgstr ""

msgid ""
"The normal course of operations for the :command:`sdist` command is as "
"follows:"
msgstr ""

msgid ""
"if the manifest file (:file:`MANIFEST` by default) exists and the first line "
"does not have a comment indicating it is generated from :file:`MANIFEST.in`, "
"then it is used as is, unaltered"
msgstr ""

msgid ""
"if the manifest file doesn't exist or has been previously automatically "
"generated, read :file:`MANIFEST.in` and create the manifest"
msgstr ""

msgid ""
"if neither :file:`MANIFEST` nor :file:`MANIFEST.in` exist, create a manifest "
"with just the default file set"
msgstr ""

msgid ""
"use the list of files now in :file:`MANIFEST` (either just generated or read "
"in) to create the source distribution archive(s)"
msgstr ""

msgid ""
"There are a couple of options that modify this behaviour.  First, use the :"
"option:`!--no-defaults` and :option:`!--no-prune` to disable the standard "
"\"include\" and \"exclude\" sets."
msgstr ""

msgid ""
"Second, you might just want to (re)generate the manifest, but not create a "
"source distribution::"
msgstr ""

msgid ":option:`!-o` is a shortcut for :option:`!--manifest-only`."
msgstr ""
